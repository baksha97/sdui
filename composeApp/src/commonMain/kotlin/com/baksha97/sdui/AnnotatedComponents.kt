package com.baksha97.sdui

import com.baksha97.sdui.shared.models.TokenRegistry
import com.baksha97.sdui.shared.models.ScreenPayload
import com.baksha97.sdui.shared.models.TokenRef
import com.baksha97.sdui.shared.models.TextToken
import com.baksha97.sdui.shared.models.ButtonToken
import com.baksha97.sdui.shared.models.CardToken
import com.baksha97.sdui.shared.models.SliderToken
import com.baksha97.sdui.shared.models.TemplateString
import com.baksha97.sdui.shared.models.Action
import com.baksha97.sdui.shared.models.ActionType
import com.baksha97.sdui.shared.models.annotations.*

/**
 * Example of how components can be defined using annotations for automatic registration.
 * This demonstrates a more ergonomic approach to component registration.
 */
@ComponentRegistry(name = "AutoGeneratedComponentRegistry")
class AnnotatedComponents {

    @RegisterComponent(
        id = "enhanced_card.title",
        version = 1
    )
    fun enhancedCardTitle(): TextToken {
        return TextToken(
            id = "enhanced_card.title",
            version = 1,
            text = TemplateString("{{title}}")
        )
    }

    @RegisterComponent(
        id = "enhanced_card.description",
        version = 1
    )
    fun enhancedCardDescription(): TextToken {
        return TextToken(
            id = "enhanced_card.description",
            version = 1,
            text = TemplateString("{{description}}")
        )
    }

    @RegisterComponent(
        id = "enhanced_card.button",
        version = 1
    )
    fun enhancedCardButton(): ButtonToken {
        return ButtonToken(
            id = "enhanced_card.button",
            version = 1,
            text = TemplateString("{{buttonText}}"),
            onClick = Action(
                type = ActionType.Custom,
                data = mapOf("target" to "enhanced_card")
            )
        )
    }

    @RegisterComponent(
        id = "enhanced_card",
        version = 1,
        dependencies = ["enhanced_card.title", "enhanced_card.description", "enhanced_card.button"]
    )
    fun enhancedCard(): CardToken {
        return CardToken(
            id = "enhanced_card",
            version = 1,
            children = listOf(
                enhancedCardTitle(),
                enhancedCardDescription(),
                enhancedCardButton()
            )
        )
    }

    @RegisterComponent(
        id = "slider_example.title",
        version = 1
    )
    fun sliderExampleTitle(): TextToken {
        return TextToken(
            id = "slider_example.title",
            version = 1,
            text = TemplateString("{{sliderTitle}}")
        )
    }

    @RegisterComponent(
        id = "slider_example.description",
        version = 1
    )
    fun sliderExampleDescription(): TextToken {
        return TextToken(
            id = "slider_example.description",
            version = 1,
            text = TemplateString("{{sliderDescription}}")
        )
    }

    @RegisterComponent(
        id = "slider_example.slider",
        version = 1
    )
    fun sliderExampleSlider(): SliderToken {
        return SliderToken(
            id = "slider_example.slider",
            version = 1,
            initialValue = 0.5f,
            valueRange = 0f..1f
        )
    }

    @RegisterComponent(
        id = "slider_example",
        version = 1,
        dependencies = ["slider_example.title", "slider_example.description", "slider_example.slider"]
    )
    fun sliderExample(): CardToken {
        return CardToken(
            id = "slider_example",
            version = 1,
            children = listOf(
                sliderExampleTitle(),
                sliderExampleDescription(),
                sliderExampleSlider()
            )
        )
    }

    @RegisterScreen(
        id = "home",
        components = ["enhanced_card"]
    )
    fun homeScreen(): ScreenPayload {
        return ScreenPayload(
            id = "home",
            tokens = listOf(
                TokenRef(
                    id = "enhanced_card",
                    bind = mapOf(
                        "title" to "Welcome to SDUI",
                        "description" to "This is a basic home screen",
                        "buttonText" to "Get Started"
                    )
                )
            )
        )
    }

    @RegisterScreen(
        id = "enhanced_home",
        components = ["enhanced_card", "slider_example"]
    )
    fun enhancedHomeScreen(): ScreenPayload {
        return ScreenPayload(
            id = "enhanced_home",
            tokens = listOf(
                TokenRef(
                    id = "enhanced_card",
                    bind = mapOf(
                        "title" to "Enhanced SDUI",
                        "description" to "This is an enhanced home screen with more features",
                        "buttonText" to "Explore"
                    )
                ),
                TokenRef(
                    id = "slider_example",
                    bind = mapOf(
                        "sliderTitle" to "Adjust Settings",
                        "sliderDescription" to "Use the slider to adjust your preferences"
                    )
                )
            )
        )
    }
}

/**
 * Manual implementation of what the annotation processor would generate.
 * This shows how the annotation processor would work in practice.
 */
class AutoGeneratedComponentRegistry {

    private val components = AnnotatedComponents()

    /**
     * Register all components in the provided registry.
     * This method would be auto-generated by the annotation processor.
     */
    fun registerComponents(registry: TokenRegistry) {
        // Register components in dependency order (deepest first)

        // Register leaf components first
        registry.register(components.enhancedCardTitle())
        registry.register(components.enhancedCardDescription())
        registry.register(components.enhancedCardButton())
        registry.register(components.sliderExampleTitle())
        registry.register(components.sliderExampleDescription())
        registry.register(components.sliderExampleSlider())

        // Register composite components
        registry.register(components.enhancedCard())
        registry.register(components.sliderExample())
    }

    /**
     * Get all screen payloads.
     * This method would be auto-generated by the annotation processor.
     */
    fun getScreens(): Map<String, ScreenPayload> {
        return mapOf(
            "home" to components.homeScreen(),
            "enhanced_home" to components.enhancedHomeScreen()
        )
    }
}
