// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.baksha97.sdui.schema.A11y in sdui.proto
package com.baksha97.sdui.schema

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

/**
 * Supporting types
 */
public class A11y(
  @field:WireField(
    tag = 1,
    adapter = "com.baksha97.sdui.schema.Role#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val role: Role = Role.ROLE_UNSPECIFIED,
  @field:WireField(
    tag = 2,
    adapter = "com.baksha97.sdui.schema.TemplateString#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val label: TemplateString? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.baksha97.sdui.schema.LiveRegion#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "liveRegion",
    schemaIndex = 2,
  )
  public val live_region: LiveRegion = LiveRegion.LIVE_REGION_UNSPECIFIED,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "isEnabled",
    schemaIndex = 3,
  )
  public val is_enabled: Boolean = false,
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "isFocusable",
    schemaIndex = 4,
  )
  public val is_focusable: Boolean = false,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<A11y, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is A11y) return false
    if (unknownFields != other.unknownFields) return false
    if (role != other.role) return false
    if (label != other.label) return false
    if (live_region != other.live_region) return false
    if (is_enabled != other.is_enabled) return false
    if (is_focusable != other.is_focusable) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + role.hashCode()
      result = result * 37 + (label?.hashCode() ?: 0)
      result = result * 37 + live_region.hashCode()
      result = result * 37 + is_enabled.hashCode()
      result = result * 37 + is_focusable.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """role=$role"""
    if (label != null) result += """label=$label"""
    result += """live_region=$live_region"""
    result += """is_enabled=$is_enabled"""
    result += """is_focusable=$is_focusable"""
    return result.joinToString(prefix = "A11y{", separator = ", ", postfix = "}")
  }

  public fun copy(
    role: Role = this.role,
    label: TemplateString? = this.label,
    live_region: LiveRegion = this.live_region,
    is_enabled: Boolean = this.is_enabled,
    is_focusable: Boolean = this.is_focusable,
    unknownFields: ByteString = this.unknownFields,
  ): A11y = A11y(role, label, live_region, is_enabled, is_focusable, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<A11y> = object : ProtoAdapter<A11y>(
      FieldEncoding.LENGTH_DELIMITED, 
      A11y::class, 
      "type.googleapis.com/com.baksha97.sdui.schema.A11y", 
      PROTO_3, 
      null, 
      "sdui.proto"
    ) {
      override fun encodedSize(`value`: A11y): Int {
        var size = value.unknownFields.size
        if (value.role != Role.ROLE_UNSPECIFIED) size += Role.ADAPTER.encodedSizeWithTag(1,
            value.role)
        if (value.label != null) size += TemplateString.ADAPTER.encodedSizeWithTag(2, value.label)
        if (value.live_region != LiveRegion.LIVE_REGION_UNSPECIFIED) size +=
            LiveRegion.ADAPTER.encodedSizeWithTag(3, value.live_region)
        if (value.is_enabled != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(4,
            value.is_enabled)
        if (value.is_focusable != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(5,
            value.is_focusable)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: A11y) {
        if (value.role != Role.ROLE_UNSPECIFIED) Role.ADAPTER.encodeWithTag(writer, 1, value.role)
        if (value.label != null) TemplateString.ADAPTER.encodeWithTag(writer, 2, value.label)
        if (value.live_region != LiveRegion.LIVE_REGION_UNSPECIFIED)
            LiveRegion.ADAPTER.encodeWithTag(writer, 3, value.live_region)
        if (value.is_enabled != false) ProtoAdapter.BOOL.encodeWithTag(writer, 4, value.is_enabled)
        if (value.is_focusable != false) ProtoAdapter.BOOL.encodeWithTag(writer, 5,
            value.is_focusable)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: A11y) {
        writer.writeBytes(value.unknownFields)
        if (value.is_focusable != false) ProtoAdapter.BOOL.encodeWithTag(writer, 5,
            value.is_focusable)
        if (value.is_enabled != false) ProtoAdapter.BOOL.encodeWithTag(writer, 4, value.is_enabled)
        if (value.live_region != LiveRegion.LIVE_REGION_UNSPECIFIED)
            LiveRegion.ADAPTER.encodeWithTag(writer, 3, value.live_region)
        if (value.label != null) TemplateString.ADAPTER.encodeWithTag(writer, 2, value.label)
        if (value.role != Role.ROLE_UNSPECIFIED) Role.ADAPTER.encodeWithTag(writer, 1, value.role)
      }

      override fun decode(reader: ProtoReader): A11y {
        var role: Role = Role.ROLE_UNSPECIFIED
        var label: TemplateString? = null
        var live_region: LiveRegion = LiveRegion.LIVE_REGION_UNSPECIFIED
        var is_enabled: Boolean = false
        var is_focusable: Boolean = false
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> try {
              role = Role.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            2 -> label = TemplateString.ADAPTER.decode(reader)
            3 -> try {
              live_region = LiveRegion.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            4 -> is_enabled = ProtoAdapter.BOOL.decode(reader)
            5 -> is_focusable = ProtoAdapter.BOOL.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return A11y(
          role = role,
          label = label,
          live_region = live_region,
          is_enabled = is_enabled,
          is_focusable = is_focusable,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: A11y): A11y = value.copy(
        label = value.label?.let(TemplateString.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
