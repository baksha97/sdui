// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.baksha97.sdui.schema.Action in sdui.proto
package com.baksha97.sdui.schema

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.immutableCopyOf
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.collections.Map
import kotlin.lazy
import okio.ByteString

public class Action(
  @field:WireField(
    tag = 1,
    adapter = "com.baksha97.sdui.schema.ActionType#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val type: ActionType = ActionType.ACTION_TYPE_UNSPECIFIED,
  data_: Map<String, String> = emptyMap(),
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<Action, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 2,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    declaredName = "data",
    schemaIndex = 1,
  )
  public val data_: Map<String, String> = immutableCopyOf("data_", data_)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Action) return false
    if (unknownFields != other.unknownFields) return false
    if (type != other.type) return false
    if (data_ != other.data_) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + type.hashCode()
      result = result * 37 + data_.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """type=$type"""
    if (data_.isNotEmpty()) result += """data_=$data_"""
    return result.joinToString(prefix = "Action{", separator = ", ", postfix = "}")
  }

  public fun copy(
    type: ActionType = this.type,
    data_: Map<String, String> = this.data_,
    unknownFields: ByteString = this.unknownFields,
  ): Action = Action(type, data_, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Action> = object : ProtoAdapter<Action>(
      FieldEncoding.LENGTH_DELIMITED, 
      Action::class, 
      "type.googleapis.com/com.baksha97.sdui.schema.Action", 
      PROTO_3, 
      null, 
      "sdui.proto"
    ) {
      private val dataAdapter: ProtoAdapter<Map<String, String>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING) }

      override fun encodedSize(`value`: Action): Int {
        var size = value.unknownFields.size
        if (value.type != ActionType.ACTION_TYPE_UNSPECIFIED) size +=
            ActionType.ADAPTER.encodedSizeWithTag(1, value.type)
        size += dataAdapter.encodedSizeWithTag(2, value.data_)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: Action) {
        if (value.type != ActionType.ACTION_TYPE_UNSPECIFIED)
            ActionType.ADAPTER.encodeWithTag(writer, 1, value.type)
        dataAdapter.encodeWithTag(writer, 2, value.data_)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: Action) {
        writer.writeBytes(value.unknownFields)
        dataAdapter.encodeWithTag(writer, 2, value.data_)
        if (value.type != ActionType.ACTION_TYPE_UNSPECIFIED)
            ActionType.ADAPTER.encodeWithTag(writer, 1, value.type)
      }

      override fun decode(reader: ProtoReader): Action {
        var type: ActionType = ActionType.ACTION_TYPE_UNSPECIFIED
        val data_ = mutableMapOf<String, String>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> try {
              type = ActionType.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            2 -> data_.putAll(dataAdapter.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return Action(
          type = type,
          data_ = data_,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: Action): Action = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
