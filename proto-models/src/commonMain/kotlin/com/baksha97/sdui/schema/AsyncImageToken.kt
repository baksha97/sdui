// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.baksha97.sdui.schema.AsyncImageToken in sdui.proto
package com.baksha97.sdui.schema

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Float
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

public class AsyncImageToken(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val id: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val version: Int = 0,
  @field:WireField(
    tag = 3,
    adapter = "com.baksha97.sdui.schema.A11y#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val a11y: A11y? = null,
  @field:WireField(
    tag = 4,
    adapter = "com.baksha97.sdui.schema.TemplateString#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 3,
  )
  public val url: TemplateString? = null,
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "widthDp",
    schemaIndex = 4,
  )
  public val width_dp: Int = 0,
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "heightDp",
    schemaIndex = 5,
  )
  public val height_dp: Int = 0,
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "layoutWeight",
    schemaIndex = 6,
  )
  public val layout_weight: Float = 0f,
  @field:WireField(
    tag = 8,
    adapter = "com.baksha97.sdui.schema.ClipShape#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 7,
  )
  public val clip: ClipShape = ClipShape.CLIP_SHAPE_UNSPECIFIED,
  @field:WireField(
    tag = 9,
    adapter = "com.baksha97.sdui.schema.ContentScale#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "contentScale",
    schemaIndex = 8,
  )
  public val content_scale: ContentScale = ContentScale.CONTENT_SCALE_UNSPECIFIED,
  @field:WireField(
    tag = 10,
    adapter = "com.baksha97.sdui.schema.Margin#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 9,
  )
  public val margin: Margin? = null,
  @field:WireField(
    tag = 11,
    adapter = "com.baksha97.sdui.schema.ErrorFallback#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "errorFallback",
    schemaIndex = 10,
  )
  public val error_fallback: ErrorFallback? = null,
  @field:WireField(
    tag = 12,
    adapter = "com.baksha97.sdui.schema.LoadingPlaceholder#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "loadingPlaceholder",
    schemaIndex = 11,
  )
  public val loading_placeholder: LoadingPlaceholder? = null,
  @field:WireField(
    tag = 13,
    adapter = "com.baksha97.sdui.schema.Action#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "onClick",
    schemaIndex = 12,
  )
  public val on_click: Action? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<AsyncImageToken, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is AsyncImageToken) return false
    if (unknownFields != other.unknownFields) return false
    if (id != other.id) return false
    if (version != other.version) return false
    if (a11y != other.a11y) return false
    if (url != other.url) return false
    if (width_dp != other.width_dp) return false
    if (height_dp != other.height_dp) return false
    if (layout_weight != other.layout_weight) return false
    if (clip != other.clip) return false
    if (content_scale != other.content_scale) return false
    if (margin != other.margin) return false
    if (error_fallback != other.error_fallback) return false
    if (loading_placeholder != other.loading_placeholder) return false
    if (on_click != other.on_click) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + id.hashCode()
      result = result * 37 + version.hashCode()
      result = result * 37 + (a11y?.hashCode() ?: 0)
      result = result * 37 + (url?.hashCode() ?: 0)
      result = result * 37 + width_dp.hashCode()
      result = result * 37 + height_dp.hashCode()
      result = result * 37 + layout_weight.hashCode()
      result = result * 37 + clip.hashCode()
      result = result * 37 + content_scale.hashCode()
      result = result * 37 + (margin?.hashCode() ?: 0)
      result = result * 37 + (error_fallback?.hashCode() ?: 0)
      result = result * 37 + (loading_placeholder?.hashCode() ?: 0)
      result = result * 37 + (on_click?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """id=${sanitize(id)}"""
    result += """version=$version"""
    if (a11y != null) result += """a11y=$a11y"""
    if (url != null) result += """url=$url"""
    result += """width_dp=$width_dp"""
    result += """height_dp=$height_dp"""
    result += """layout_weight=$layout_weight"""
    result += """clip=$clip"""
    result += """content_scale=$content_scale"""
    if (margin != null) result += """margin=$margin"""
    if (error_fallback != null) result += """error_fallback=$error_fallback"""
    if (loading_placeholder != null) result += """loading_placeholder=$loading_placeholder"""
    if (on_click != null) result += """on_click=$on_click"""
    return result.joinToString(prefix = "AsyncImageToken{", separator = ", ", postfix = "}")
  }

  public fun copy(
    id: String = this.id,
    version: Int = this.version,
    a11y: A11y? = this.a11y,
    url: TemplateString? = this.url,
    width_dp: Int = this.width_dp,
    height_dp: Int = this.height_dp,
    layout_weight: Float = this.layout_weight,
    clip: ClipShape = this.clip,
    content_scale: ContentScale = this.content_scale,
    margin: Margin? = this.margin,
    error_fallback: ErrorFallback? = this.error_fallback,
    loading_placeholder: LoadingPlaceholder? = this.loading_placeholder,
    on_click: Action? = this.on_click,
    unknownFields: ByteString = this.unknownFields,
  ): AsyncImageToken = AsyncImageToken(id, version, a11y, url, width_dp, height_dp, layout_weight,
      clip, content_scale, margin, error_fallback, loading_placeholder, on_click, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<AsyncImageToken> = object : ProtoAdapter<AsyncImageToken>(
      FieldEncoding.LENGTH_DELIMITED, 
      AsyncImageToken::class, 
      "type.googleapis.com/com.baksha97.sdui.schema.AsyncImageToken", 
      PROTO_3, 
      null, 
      "sdui.proto"
    ) {
      override fun encodedSize(`value`: AsyncImageToken): Int {
        var size = value.unknownFields.size
        if (value.id != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.id)
        if (value.version != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(2, value.version)
        if (value.a11y != null) size += A11y.ADAPTER.encodedSizeWithTag(3, value.a11y)
        if (value.url != null) size += TemplateString.ADAPTER.encodedSizeWithTag(4, value.url)
        if (value.width_dp != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(5, value.width_dp)
        if (value.height_dp != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(6, value.height_dp)
        if (!value.layout_weight.equals(0f)) size += ProtoAdapter.FLOAT.encodedSizeWithTag(7,
            value.layout_weight)
        if (value.clip != ClipShape.CLIP_SHAPE_UNSPECIFIED) size +=
            ClipShape.ADAPTER.encodedSizeWithTag(8, value.clip)
        if (value.content_scale != ContentScale.CONTENT_SCALE_UNSPECIFIED) size +=
            ContentScale.ADAPTER.encodedSizeWithTag(9, value.content_scale)
        if (value.margin != null) size += Margin.ADAPTER.encodedSizeWithTag(10, value.margin)
        if (value.error_fallback != null) size += ErrorFallback.ADAPTER.encodedSizeWithTag(11,
            value.error_fallback)
        if (value.loading_placeholder != null) size +=
            LoadingPlaceholder.ADAPTER.encodedSizeWithTag(12, value.loading_placeholder)
        if (value.on_click != null) size += Action.ADAPTER.encodedSizeWithTag(13, value.on_click)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: AsyncImageToken) {
        if (value.id != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id)
        if (value.version != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.version)
        if (value.a11y != null) A11y.ADAPTER.encodeWithTag(writer, 3, value.a11y)
        if (value.url != null) TemplateString.ADAPTER.encodeWithTag(writer, 4, value.url)
        if (value.width_dp != 0) ProtoAdapter.INT32.encodeWithTag(writer, 5, value.width_dp)
        if (value.height_dp != 0) ProtoAdapter.INT32.encodeWithTag(writer, 6, value.height_dp)
        if (!value.layout_weight.equals(0f)) ProtoAdapter.FLOAT.encodeWithTag(writer, 7,
            value.layout_weight)
        if (value.clip != ClipShape.CLIP_SHAPE_UNSPECIFIED) ClipShape.ADAPTER.encodeWithTag(writer,
            8, value.clip)
        if (value.content_scale != ContentScale.CONTENT_SCALE_UNSPECIFIED)
            ContentScale.ADAPTER.encodeWithTag(writer, 9, value.content_scale)
        if (value.margin != null) Margin.ADAPTER.encodeWithTag(writer, 10, value.margin)
        if (value.error_fallback != null) ErrorFallback.ADAPTER.encodeWithTag(writer, 11,
            value.error_fallback)
        if (value.loading_placeholder != null) LoadingPlaceholder.ADAPTER.encodeWithTag(writer, 12,
            value.loading_placeholder)
        if (value.on_click != null) Action.ADAPTER.encodeWithTag(writer, 13, value.on_click)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: AsyncImageToken) {
        writer.writeBytes(value.unknownFields)
        if (value.on_click != null) Action.ADAPTER.encodeWithTag(writer, 13, value.on_click)
        if (value.loading_placeholder != null) LoadingPlaceholder.ADAPTER.encodeWithTag(writer, 12,
            value.loading_placeholder)
        if (value.error_fallback != null) ErrorFallback.ADAPTER.encodeWithTag(writer, 11,
            value.error_fallback)
        if (value.margin != null) Margin.ADAPTER.encodeWithTag(writer, 10, value.margin)
        if (value.content_scale != ContentScale.CONTENT_SCALE_UNSPECIFIED)
            ContentScale.ADAPTER.encodeWithTag(writer, 9, value.content_scale)
        if (value.clip != ClipShape.CLIP_SHAPE_UNSPECIFIED) ClipShape.ADAPTER.encodeWithTag(writer,
            8, value.clip)
        if (!value.layout_weight.equals(0f)) ProtoAdapter.FLOAT.encodeWithTag(writer, 7,
            value.layout_weight)
        if (value.height_dp != 0) ProtoAdapter.INT32.encodeWithTag(writer, 6, value.height_dp)
        if (value.width_dp != 0) ProtoAdapter.INT32.encodeWithTag(writer, 5, value.width_dp)
        if (value.url != null) TemplateString.ADAPTER.encodeWithTag(writer, 4, value.url)
        if (value.a11y != null) A11y.ADAPTER.encodeWithTag(writer, 3, value.a11y)
        if (value.version != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.version)
        if (value.id != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id)
      }

      override fun decode(reader: ProtoReader): AsyncImageToken {
        var id: String = ""
        var version: Int = 0
        var a11y: A11y? = null
        var url: TemplateString? = null
        var width_dp: Int = 0
        var height_dp: Int = 0
        var layout_weight: Float = 0f
        var clip: ClipShape = ClipShape.CLIP_SHAPE_UNSPECIFIED
        var content_scale: ContentScale = ContentScale.CONTENT_SCALE_UNSPECIFIED
        var margin: Margin? = null
        var error_fallback: ErrorFallback? = null
        var loading_placeholder: LoadingPlaceholder? = null
        var on_click: Action? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> id = ProtoAdapter.STRING.decode(reader)
            2 -> version = ProtoAdapter.INT32.decode(reader)
            3 -> a11y = A11y.ADAPTER.decode(reader)
            4 -> url = TemplateString.ADAPTER.decode(reader)
            5 -> width_dp = ProtoAdapter.INT32.decode(reader)
            6 -> height_dp = ProtoAdapter.INT32.decode(reader)
            7 -> layout_weight = ProtoAdapter.FLOAT.decode(reader)
            8 -> try {
              clip = ClipShape.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            9 -> try {
              content_scale = ContentScale.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            10 -> margin = Margin.ADAPTER.decode(reader)
            11 -> error_fallback = ErrorFallback.ADAPTER.decode(reader)
            12 -> loading_placeholder = LoadingPlaceholder.ADAPTER.decode(reader)
            13 -> on_click = Action.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return AsyncImageToken(
          id = id,
          version = version,
          a11y = a11y,
          url = url,
          width_dp = width_dp,
          height_dp = height_dp,
          layout_weight = layout_weight,
          clip = clip,
          content_scale = content_scale,
          margin = margin,
          error_fallback = error_fallback,
          loading_placeholder = loading_placeholder,
          on_click = on_click,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: AsyncImageToken): AsyncImageToken = value.copy(
        a11y = value.a11y?.let(A11y.ADAPTER::redact),
        url = value.url?.let(TemplateString.ADAPTER::redact),
        margin = value.margin?.let(Margin.ADAPTER::redact),
        error_fallback = value.error_fallback?.let(ErrorFallback.ADAPTER::redact),
        loading_placeholder = value.loading_placeholder?.let(LoadingPlaceholder.ADAPTER::redact),
        on_click = value.on_click?.let(Action.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
