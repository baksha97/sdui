// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.baksha97.sdui.schema.Background in sdui.proto
package com.baksha97.sdui.schema

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

public class Background(
  @field:WireField(
    tag = 1,
    adapter = "com.baksha97.sdui.schema.ColorValue#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val color: ColorValue? = null,
  @field:WireField(
    tag = 2,
    adapter = "com.baksha97.sdui.schema.ColorValue#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "borderColor",
    schemaIndex = 1,
  )
  public val border_color: ColorValue? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "borderWidth",
    schemaIndex = 2,
  )
  public val border_width: Int = 0,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "cornerRadius",
    schemaIndex = 3,
  )
  public val corner_radius: Int = 0,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<Background, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Background) return false
    if (unknownFields != other.unknownFields) return false
    if (color != other.color) return false
    if (border_color != other.border_color) return false
    if (border_width != other.border_width) return false
    if (corner_radius != other.corner_radius) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (color?.hashCode() ?: 0)
      result = result * 37 + (border_color?.hashCode() ?: 0)
      result = result * 37 + border_width.hashCode()
      result = result * 37 + corner_radius.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (color != null) result += """color=$color"""
    if (border_color != null) result += """border_color=$border_color"""
    result += """border_width=$border_width"""
    result += """corner_radius=$corner_radius"""
    return result.joinToString(prefix = "Background{", separator = ", ", postfix = "}")
  }

  public fun copy(
    color: ColorValue? = this.color,
    border_color: ColorValue? = this.border_color,
    border_width: Int = this.border_width,
    corner_radius: Int = this.corner_radius,
    unknownFields: ByteString = this.unknownFields,
  ): Background = Background(color, border_color, border_width, corner_radius, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Background> = object : ProtoAdapter<Background>(
      FieldEncoding.LENGTH_DELIMITED, 
      Background::class, 
      "type.googleapis.com/com.baksha97.sdui.schema.Background", 
      PROTO_3, 
      null, 
      "sdui.proto"
    ) {
      override fun encodedSize(`value`: Background): Int {
        var size = value.unknownFields.size
        if (value.color != null) size += ColorValue.ADAPTER.encodedSizeWithTag(1, value.color)
        if (value.border_color != null) size += ColorValue.ADAPTER.encodedSizeWithTag(2,
            value.border_color)
        if (value.border_width != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(3,
            value.border_width)
        if (value.corner_radius != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(4,
            value.corner_radius)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: Background) {
        if (value.color != null) ColorValue.ADAPTER.encodeWithTag(writer, 1, value.color)
        if (value.border_color != null) ColorValue.ADAPTER.encodeWithTag(writer, 2,
            value.border_color)
        if (value.border_width != 0) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.border_width)
        if (value.corner_radius != 0) ProtoAdapter.INT32.encodeWithTag(writer, 4,
            value.corner_radius)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: Background) {
        writer.writeBytes(value.unknownFields)
        if (value.corner_radius != 0) ProtoAdapter.INT32.encodeWithTag(writer, 4,
            value.corner_radius)
        if (value.border_width != 0) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.border_width)
        if (value.border_color != null) ColorValue.ADAPTER.encodeWithTag(writer, 2,
            value.border_color)
        if (value.color != null) ColorValue.ADAPTER.encodeWithTag(writer, 1, value.color)
      }

      override fun decode(reader: ProtoReader): Background {
        var color: ColorValue? = null
        var border_color: ColorValue? = null
        var border_width: Int = 0
        var corner_radius: Int = 0
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> color = ColorValue.ADAPTER.decode(reader)
            2 -> border_color = ColorValue.ADAPTER.decode(reader)
            3 -> border_width = ProtoAdapter.INT32.decode(reader)
            4 -> corner_radius = ProtoAdapter.INT32.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Background(
          color = color,
          border_color = border_color,
          border_width = border_width,
          corner_radius = corner_radius,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: Background): Background = value.copy(
        color = value.color?.let(ColorValue.ADAPTER::redact),
        border_color = value.border_color?.let(ColorValue.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
