// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.baksha97.sdui.schema.ButtonToken in sdui.proto
package com.baksha97.sdui.schema

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

public class ButtonToken(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val id: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val version: Int = 0,
  @field:WireField(
    tag = 3,
    adapter = "com.baksha97.sdui.schema.A11y#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val a11y: A11y? = null,
  @field:WireField(
    tag = 4,
    adapter = "com.baksha97.sdui.schema.TemplateString#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 3,
  )
  public val text: TemplateString? = null,
  @field:WireField(
    tag = 5,
    adapter = "com.baksha97.sdui.schema.ButtonStyle#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 4,
  )
  public val style: ButtonStyle = ButtonStyle.BUTTON_STYLE_UNSPECIFIED,
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 5,
  )
  public val enabled: Boolean = false,
  @field:WireField(
    tag = 7,
    adapter = "com.baksha97.sdui.schema.Margin#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 6,
  )
  public val margin: Margin? = null,
  @field:WireField(
    tag = 8,
    adapter = "com.baksha97.sdui.schema.Action#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "onClick",
    schemaIndex = 7,
  )
  public val on_click: Action? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<ButtonToken, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ButtonToken) return false
    if (unknownFields != other.unknownFields) return false
    if (id != other.id) return false
    if (version != other.version) return false
    if (a11y != other.a11y) return false
    if (text != other.text) return false
    if (style != other.style) return false
    if (enabled != other.enabled) return false
    if (margin != other.margin) return false
    if (on_click != other.on_click) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + id.hashCode()
      result = result * 37 + version.hashCode()
      result = result * 37 + (a11y?.hashCode() ?: 0)
      result = result * 37 + (text?.hashCode() ?: 0)
      result = result * 37 + style.hashCode()
      result = result * 37 + enabled.hashCode()
      result = result * 37 + (margin?.hashCode() ?: 0)
      result = result * 37 + (on_click?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """id=${sanitize(id)}"""
    result += """version=$version"""
    if (a11y != null) result += """a11y=$a11y"""
    if (text != null) result += """text=$text"""
    result += """style=$style"""
    result += """enabled=$enabled"""
    if (margin != null) result += """margin=$margin"""
    if (on_click != null) result += """on_click=$on_click"""
    return result.joinToString(prefix = "ButtonToken{", separator = ", ", postfix = "}")
  }

  public fun copy(
    id: String = this.id,
    version: Int = this.version,
    a11y: A11y? = this.a11y,
    text: TemplateString? = this.text,
    style: ButtonStyle = this.style,
    enabled: Boolean = this.enabled,
    margin: Margin? = this.margin,
    on_click: Action? = this.on_click,
    unknownFields: ByteString = this.unknownFields,
  ): ButtonToken = ButtonToken(id, version, a11y, text, style, enabled, margin, on_click,
      unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<ButtonToken> = object : ProtoAdapter<ButtonToken>(
      FieldEncoding.LENGTH_DELIMITED, 
      ButtonToken::class, 
      "type.googleapis.com/com.baksha97.sdui.schema.ButtonToken", 
      PROTO_3, 
      null, 
      "sdui.proto"
    ) {
      override fun encodedSize(`value`: ButtonToken): Int {
        var size = value.unknownFields.size
        if (value.id != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.id)
        if (value.version != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(2, value.version)
        if (value.a11y != null) size += A11y.ADAPTER.encodedSizeWithTag(3, value.a11y)
        if (value.text != null) size += TemplateString.ADAPTER.encodedSizeWithTag(4, value.text)
        if (value.style != ButtonStyle.BUTTON_STYLE_UNSPECIFIED) size +=
            ButtonStyle.ADAPTER.encodedSizeWithTag(5, value.style)
        if (value.enabled != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(6, value.enabled)
        if (value.margin != null) size += Margin.ADAPTER.encodedSizeWithTag(7, value.margin)
        if (value.on_click != null) size += Action.ADAPTER.encodedSizeWithTag(8, value.on_click)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: ButtonToken) {
        if (value.id != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id)
        if (value.version != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.version)
        if (value.a11y != null) A11y.ADAPTER.encodeWithTag(writer, 3, value.a11y)
        if (value.text != null) TemplateString.ADAPTER.encodeWithTag(writer, 4, value.text)
        if (value.style != ButtonStyle.BUTTON_STYLE_UNSPECIFIED)
            ButtonStyle.ADAPTER.encodeWithTag(writer, 5, value.style)
        if (value.enabled != false) ProtoAdapter.BOOL.encodeWithTag(writer, 6, value.enabled)
        if (value.margin != null) Margin.ADAPTER.encodeWithTag(writer, 7, value.margin)
        if (value.on_click != null) Action.ADAPTER.encodeWithTag(writer, 8, value.on_click)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: ButtonToken) {
        writer.writeBytes(value.unknownFields)
        if (value.on_click != null) Action.ADAPTER.encodeWithTag(writer, 8, value.on_click)
        if (value.margin != null) Margin.ADAPTER.encodeWithTag(writer, 7, value.margin)
        if (value.enabled != false) ProtoAdapter.BOOL.encodeWithTag(writer, 6, value.enabled)
        if (value.style != ButtonStyle.BUTTON_STYLE_UNSPECIFIED)
            ButtonStyle.ADAPTER.encodeWithTag(writer, 5, value.style)
        if (value.text != null) TemplateString.ADAPTER.encodeWithTag(writer, 4, value.text)
        if (value.a11y != null) A11y.ADAPTER.encodeWithTag(writer, 3, value.a11y)
        if (value.version != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.version)
        if (value.id != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id)
      }

      override fun decode(reader: ProtoReader): ButtonToken {
        var id: String = ""
        var version: Int = 0
        var a11y: A11y? = null
        var text: TemplateString? = null
        var style: ButtonStyle = ButtonStyle.BUTTON_STYLE_UNSPECIFIED
        var enabled: Boolean = false
        var margin: Margin? = null
        var on_click: Action? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> id = ProtoAdapter.STRING.decode(reader)
            2 -> version = ProtoAdapter.INT32.decode(reader)
            3 -> a11y = A11y.ADAPTER.decode(reader)
            4 -> text = TemplateString.ADAPTER.decode(reader)
            5 -> try {
              style = ButtonStyle.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            6 -> enabled = ProtoAdapter.BOOL.decode(reader)
            7 -> margin = Margin.ADAPTER.decode(reader)
            8 -> on_click = Action.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return ButtonToken(
          id = id,
          version = version,
          a11y = a11y,
          text = text,
          style = style,
          enabled = enabled,
          margin = margin,
          on_click = on_click,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: ButtonToken): ButtonToken = value.copy(
        a11y = value.a11y?.let(A11y.ADAPTER::redact),
        text = value.text?.let(TemplateString.ADAPTER::redact),
        margin = value.margin?.let(Margin.ADAPTER::redact),
        on_click = value.on_click?.let(Action.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
