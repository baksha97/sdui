// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.baksha97.sdui.schema.CardToken in sdui.proto
package com.baksha97.sdui.schema

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.collections.List
import okio.ByteString

public class CardToken(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val id: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val version: Int = 0,
  @field:WireField(
    tag = 3,
    adapter = "com.baksha97.sdui.schema.A11y#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val a11y: A11y? = null,
  @field:WireField(
    tag = 4,
    adapter = "com.baksha97.sdui.schema.Padding#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 3,
  )
  public val padding: Padding? = null,
  @field:WireField(
    tag = 5,
    adapter = "com.baksha97.sdui.schema.Margin#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 4,
  )
  public val margin: Margin? = null,
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 5,
  )
  public val elevation: Int = 0,
  @field:WireField(
    tag = 7,
    adapter = "com.baksha97.sdui.schema.CardShape#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 6,
  )
  public val shape: CardShape = CardShape.CARD_SHAPE_UNSPECIFIED,
  @field:WireField(
    tag = 8,
    adapter = "com.baksha97.sdui.schema.Background#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 7,
  )
  public val background: Background? = null,
  @field:WireField(
    tag = 9,
    adapter = "com.baksha97.sdui.schema.Action#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "onClick",
    schemaIndex = 8,
  )
  public val on_click: Action? = null,
  children: List<Token> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<CardToken, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 10,
    adapter = "com.baksha97.sdui.schema.Token#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 9,
  )
  public val children: List<Token> = immutableCopyOf("children", children)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is CardToken) return false
    if (unknownFields != other.unknownFields) return false
    if (id != other.id) return false
    if (version != other.version) return false
    if (a11y != other.a11y) return false
    if (padding != other.padding) return false
    if (margin != other.margin) return false
    if (elevation != other.elevation) return false
    if (shape != other.shape) return false
    if (background != other.background) return false
    if (on_click != other.on_click) return false
    if (children != other.children) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + id.hashCode()
      result = result * 37 + version.hashCode()
      result = result * 37 + (a11y?.hashCode() ?: 0)
      result = result * 37 + (padding?.hashCode() ?: 0)
      result = result * 37 + (margin?.hashCode() ?: 0)
      result = result * 37 + elevation.hashCode()
      result = result * 37 + shape.hashCode()
      result = result * 37 + (background?.hashCode() ?: 0)
      result = result * 37 + (on_click?.hashCode() ?: 0)
      result = result * 37 + children.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """id=${sanitize(id)}"""
    result += """version=$version"""
    if (a11y != null) result += """a11y=$a11y"""
    if (padding != null) result += """padding=$padding"""
    if (margin != null) result += """margin=$margin"""
    result += """elevation=$elevation"""
    result += """shape=$shape"""
    if (background != null) result += """background=$background"""
    if (on_click != null) result += """on_click=$on_click"""
    if (children.isNotEmpty()) result += """children=$children"""
    return result.joinToString(prefix = "CardToken{", separator = ", ", postfix = "}")
  }

  public fun copy(
    id: String = this.id,
    version: Int = this.version,
    a11y: A11y? = this.a11y,
    padding: Padding? = this.padding,
    margin: Margin? = this.margin,
    elevation: Int = this.elevation,
    shape: CardShape = this.shape,
    background: Background? = this.background,
    on_click: Action? = this.on_click,
    children: List<Token> = this.children,
    unknownFields: ByteString = this.unknownFields,
  ): CardToken = CardToken(id, version, a11y, padding, margin, elevation, shape, background,
      on_click, children, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<CardToken> = object : ProtoAdapter<CardToken>(
      FieldEncoding.LENGTH_DELIMITED, 
      CardToken::class, 
      "type.googleapis.com/com.baksha97.sdui.schema.CardToken", 
      PROTO_3, 
      null, 
      "sdui.proto"
    ) {
      override fun encodedSize(`value`: CardToken): Int {
        var size = value.unknownFields.size
        if (value.id != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.id)
        if (value.version != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(2, value.version)
        if (value.a11y != null) size += A11y.ADAPTER.encodedSizeWithTag(3, value.a11y)
        if (value.padding != null) size += Padding.ADAPTER.encodedSizeWithTag(4, value.padding)
        if (value.margin != null) size += Margin.ADAPTER.encodedSizeWithTag(5, value.margin)
        if (value.elevation != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(6, value.elevation)
        if (value.shape != CardShape.CARD_SHAPE_UNSPECIFIED) size +=
            CardShape.ADAPTER.encodedSizeWithTag(7, value.shape)
        if (value.background != null) size += Background.ADAPTER.encodedSizeWithTag(8,
            value.background)
        if (value.on_click != null) size += Action.ADAPTER.encodedSizeWithTag(9, value.on_click)
        size += Token.ADAPTER.asRepeated().encodedSizeWithTag(10, value.children)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: CardToken) {
        if (value.id != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id)
        if (value.version != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.version)
        if (value.a11y != null) A11y.ADAPTER.encodeWithTag(writer, 3, value.a11y)
        if (value.padding != null) Padding.ADAPTER.encodeWithTag(writer, 4, value.padding)
        if (value.margin != null) Margin.ADAPTER.encodeWithTag(writer, 5, value.margin)
        if (value.elevation != 0) ProtoAdapter.INT32.encodeWithTag(writer, 6, value.elevation)
        if (value.shape != CardShape.CARD_SHAPE_UNSPECIFIED) CardShape.ADAPTER.encodeWithTag(writer,
            7, value.shape)
        if (value.background != null) Background.ADAPTER.encodeWithTag(writer, 8, value.background)
        if (value.on_click != null) Action.ADAPTER.encodeWithTag(writer, 9, value.on_click)
        Token.ADAPTER.asRepeated().encodeWithTag(writer, 10, value.children)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: CardToken) {
        writer.writeBytes(value.unknownFields)
        Token.ADAPTER.asRepeated().encodeWithTag(writer, 10, value.children)
        if (value.on_click != null) Action.ADAPTER.encodeWithTag(writer, 9, value.on_click)
        if (value.background != null) Background.ADAPTER.encodeWithTag(writer, 8, value.background)
        if (value.shape != CardShape.CARD_SHAPE_UNSPECIFIED) CardShape.ADAPTER.encodeWithTag(writer,
            7, value.shape)
        if (value.elevation != 0) ProtoAdapter.INT32.encodeWithTag(writer, 6, value.elevation)
        if (value.margin != null) Margin.ADAPTER.encodeWithTag(writer, 5, value.margin)
        if (value.padding != null) Padding.ADAPTER.encodeWithTag(writer, 4, value.padding)
        if (value.a11y != null) A11y.ADAPTER.encodeWithTag(writer, 3, value.a11y)
        if (value.version != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.version)
        if (value.id != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id)
      }

      override fun decode(reader: ProtoReader): CardToken {
        var id: String = ""
        var version: Int = 0
        var a11y: A11y? = null
        var padding: Padding? = null
        var margin: Margin? = null
        var elevation: Int = 0
        var shape: CardShape = CardShape.CARD_SHAPE_UNSPECIFIED
        var background: Background? = null
        var on_click: Action? = null
        val children = mutableListOf<Token>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> id = ProtoAdapter.STRING.decode(reader)
            2 -> version = ProtoAdapter.INT32.decode(reader)
            3 -> a11y = A11y.ADAPTER.decode(reader)
            4 -> padding = Padding.ADAPTER.decode(reader)
            5 -> margin = Margin.ADAPTER.decode(reader)
            6 -> elevation = ProtoAdapter.INT32.decode(reader)
            7 -> try {
              shape = CardShape.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            8 -> background = Background.ADAPTER.decode(reader)
            9 -> on_click = Action.ADAPTER.decode(reader)
            10 -> children.add(Token.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return CardToken(
          id = id,
          version = version,
          a11y = a11y,
          padding = padding,
          margin = margin,
          elevation = elevation,
          shape = shape,
          background = background,
          on_click = on_click,
          children = children,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: CardToken): CardToken = value.copy(
        a11y = value.a11y?.let(A11y.ADAPTER::redact),
        padding = value.padding?.let(Padding.ADAPTER::redact),
        margin = value.margin?.let(Margin.ADAPTER::redact),
        background = value.background?.let(Background.ADAPTER::redact),
        on_click = value.on_click?.let(Action.ADAPTER::redact),
        children = value.children.redactElements(Token.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
