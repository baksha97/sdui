// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.baksha97.sdui.schema.ColorValue in sdui.proto
package com.baksha97.sdui.schema

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

public class ColorValue(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val red: Int = 0,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val green: Int = 0,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val blue: Int = 0,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 3,
  )
  public val alpha: Int = 0,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<ColorValue, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ColorValue) return false
    if (unknownFields != other.unknownFields) return false
    if (red != other.red) return false
    if (green != other.green) return false
    if (blue != other.blue) return false
    if (alpha != other.alpha) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + red.hashCode()
      result = result * 37 + green.hashCode()
      result = result * 37 + blue.hashCode()
      result = result * 37 + alpha.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """red=$red"""
    result += """green=$green"""
    result += """blue=$blue"""
    result += """alpha=$alpha"""
    return result.joinToString(prefix = "ColorValue{", separator = ", ", postfix = "}")
  }

  public fun copy(
    red: Int = this.red,
    green: Int = this.green,
    blue: Int = this.blue,
    alpha: Int = this.alpha,
    unknownFields: ByteString = this.unknownFields,
  ): ColorValue = ColorValue(red, green, blue, alpha, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<ColorValue> = object : ProtoAdapter<ColorValue>(
      FieldEncoding.LENGTH_DELIMITED, 
      ColorValue::class, 
      "type.googleapis.com/com.baksha97.sdui.schema.ColorValue", 
      PROTO_3, 
      null, 
      "sdui.proto"
    ) {
      override fun encodedSize(`value`: ColorValue): Int {
        var size = value.unknownFields.size
        if (value.red != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(1, value.red)
        if (value.green != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(2, value.green)
        if (value.blue != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(3, value.blue)
        if (value.alpha != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(4, value.alpha)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: ColorValue) {
        if (value.red != 0) ProtoAdapter.INT32.encodeWithTag(writer, 1, value.red)
        if (value.green != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.green)
        if (value.blue != 0) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.blue)
        if (value.alpha != 0) ProtoAdapter.INT32.encodeWithTag(writer, 4, value.alpha)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: ColorValue) {
        writer.writeBytes(value.unknownFields)
        if (value.alpha != 0) ProtoAdapter.INT32.encodeWithTag(writer, 4, value.alpha)
        if (value.blue != 0) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.blue)
        if (value.green != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.green)
        if (value.red != 0) ProtoAdapter.INT32.encodeWithTag(writer, 1, value.red)
      }

      override fun decode(reader: ProtoReader): ColorValue {
        var red: Int = 0
        var green: Int = 0
        var blue: Int = 0
        var alpha: Int = 0
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> red = ProtoAdapter.INT32.decode(reader)
            2 -> green = ProtoAdapter.INT32.decode(reader)
            3 -> blue = ProtoAdapter.INT32.decode(reader)
            4 -> alpha = ProtoAdapter.INT32.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return ColorValue(
          red = red,
          green = green,
          blue = blue,
          alpha = alpha,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: ColorValue): ColorValue = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
