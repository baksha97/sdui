// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.baksha97.sdui.schema.ErrorFallback in sdui.proto
package com.baksha97.sdui.schema

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

public class ErrorFallback(
  @field:WireField(
    tag = 1,
    adapter = "com.baksha97.sdui.schema.TemplateString#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val text: TemplateString? = null,
  @field:WireField(
    tag = 2,
    adapter = "com.baksha97.sdui.schema.TemplateString#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "iconUrl",
    schemaIndex = 1,
  )
  public val icon_url: TemplateString? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<ErrorFallback, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ErrorFallback) return false
    if (unknownFields != other.unknownFields) return false
    if (text != other.text) return false
    if (icon_url != other.icon_url) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (text?.hashCode() ?: 0)
      result = result * 37 + (icon_url?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (text != null) result += """text=$text"""
    if (icon_url != null) result += """icon_url=$icon_url"""
    return result.joinToString(prefix = "ErrorFallback{", separator = ", ", postfix = "}")
  }

  public fun copy(
    text: TemplateString? = this.text,
    icon_url: TemplateString? = this.icon_url,
    unknownFields: ByteString = this.unknownFields,
  ): ErrorFallback = ErrorFallback(text, icon_url, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<ErrorFallback> = object : ProtoAdapter<ErrorFallback>(
      FieldEncoding.LENGTH_DELIMITED, 
      ErrorFallback::class, 
      "type.googleapis.com/com.baksha97.sdui.schema.ErrorFallback", 
      PROTO_3, 
      null, 
      "sdui.proto"
    ) {
      override fun encodedSize(`value`: ErrorFallback): Int {
        var size = value.unknownFields.size
        if (value.text != null) size += TemplateString.ADAPTER.encodedSizeWithTag(1, value.text)
        if (value.icon_url != null) size += TemplateString.ADAPTER.encodedSizeWithTag(2,
            value.icon_url)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: ErrorFallback) {
        if (value.text != null) TemplateString.ADAPTER.encodeWithTag(writer, 1, value.text)
        if (value.icon_url != null) TemplateString.ADAPTER.encodeWithTag(writer, 2, value.icon_url)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: ErrorFallback) {
        writer.writeBytes(value.unknownFields)
        if (value.icon_url != null) TemplateString.ADAPTER.encodeWithTag(writer, 2, value.icon_url)
        if (value.text != null) TemplateString.ADAPTER.encodeWithTag(writer, 1, value.text)
      }

      override fun decode(reader: ProtoReader): ErrorFallback {
        var text: TemplateString? = null
        var icon_url: TemplateString? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> text = TemplateString.ADAPTER.decode(reader)
            2 -> icon_url = TemplateString.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return ErrorFallback(
          text = text,
          icon_url = icon_url,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: ErrorFallback): ErrorFallback = value.copy(
        text = value.text?.let(TemplateString.ADAPTER::redact),
        icon_url = value.icon_url?.let(TemplateString.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
