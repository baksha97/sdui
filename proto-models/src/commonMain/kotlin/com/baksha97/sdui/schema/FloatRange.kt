// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.baksha97.sdui.schema.FloatRange in sdui.proto
package com.baksha97.sdui.schema

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Float
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

public class FloatRange(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val start: Float = 0f,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val end: Float = 0f,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<FloatRange, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is FloatRange) return false
    if (unknownFields != other.unknownFields) return false
    if (start != other.start) return false
    if (end != other.end) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + start.hashCode()
      result = result * 37 + end.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """start=$start"""
    result += """end=$end"""
    return result.joinToString(prefix = "FloatRange{", separator = ", ", postfix = "}")
  }

  public fun copy(
    start: Float = this.start,
    end: Float = this.end,
    unknownFields: ByteString = this.unknownFields,
  ): FloatRange = FloatRange(start, end, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<FloatRange> = object : ProtoAdapter<FloatRange>(
      FieldEncoding.LENGTH_DELIMITED, 
      FloatRange::class, 
      "type.googleapis.com/com.baksha97.sdui.schema.FloatRange", 
      PROTO_3, 
      null, 
      "sdui.proto"
    ) {
      override fun encodedSize(`value`: FloatRange): Int {
        var size = value.unknownFields.size
        if (!value.start.equals(0f)) size += ProtoAdapter.FLOAT.encodedSizeWithTag(1, value.start)
        if (!value.end.equals(0f)) size += ProtoAdapter.FLOAT.encodedSizeWithTag(2, value.end)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: FloatRange) {
        if (!value.start.equals(0f)) ProtoAdapter.FLOAT.encodeWithTag(writer, 1, value.start)
        if (!value.end.equals(0f)) ProtoAdapter.FLOAT.encodeWithTag(writer, 2, value.end)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: FloatRange) {
        writer.writeBytes(value.unknownFields)
        if (!value.end.equals(0f)) ProtoAdapter.FLOAT.encodeWithTag(writer, 2, value.end)
        if (!value.start.equals(0f)) ProtoAdapter.FLOAT.encodeWithTag(writer, 1, value.start)
      }

      override fun decode(reader: ProtoReader): FloatRange {
        var start: Float = 0f
        var end: Float = 0f
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> start = ProtoAdapter.FLOAT.decode(reader)
            2 -> end = ProtoAdapter.FLOAT.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return FloatRange(
          start = start,
          end = end,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: FloatRange): FloatRange = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
