// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.baksha97.sdui.schema.LoadingPlaceholder in sdui.proto
package com.baksha97.sdui.schema

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

public class LoadingPlaceholder(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "showProgressIndicator",
    schemaIndex = 0,
  )
  public val show_progress_indicator: Boolean = false,
  @field:WireField(
    tag = 2,
    adapter = "com.baksha97.sdui.schema.ColorValue#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "backgroundColor",
    schemaIndex = 1,
  )
  public val background_color: ColorValue? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<LoadingPlaceholder, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is LoadingPlaceholder) return false
    if (unknownFields != other.unknownFields) return false
    if (show_progress_indicator != other.show_progress_indicator) return false
    if (background_color != other.background_color) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + show_progress_indicator.hashCode()
      result = result * 37 + (background_color?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """show_progress_indicator=$show_progress_indicator"""
    if (background_color != null) result += """background_color=$background_color"""
    return result.joinToString(prefix = "LoadingPlaceholder{", separator = ", ", postfix = "}")
  }

  public fun copy(
    show_progress_indicator: Boolean = this.show_progress_indicator,
    background_color: ColorValue? = this.background_color,
    unknownFields: ByteString = this.unknownFields,
  ): LoadingPlaceholder = LoadingPlaceholder(show_progress_indicator, background_color,
      unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<LoadingPlaceholder> = object :
        ProtoAdapter<LoadingPlaceholder>(
      FieldEncoding.LENGTH_DELIMITED, 
      LoadingPlaceholder::class, 
      "type.googleapis.com/com.baksha97.sdui.schema.LoadingPlaceholder", 
      PROTO_3, 
      null, 
      "sdui.proto"
    ) {
      override fun encodedSize(`value`: LoadingPlaceholder): Int {
        var size = value.unknownFields.size
        if (value.show_progress_indicator != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(1,
            value.show_progress_indicator)
        if (value.background_color != null) size += ColorValue.ADAPTER.encodedSizeWithTag(2,
            value.background_color)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: LoadingPlaceholder) {
        if (value.show_progress_indicator != false) ProtoAdapter.BOOL.encodeWithTag(writer, 1,
            value.show_progress_indicator)
        if (value.background_color != null) ColorValue.ADAPTER.encodeWithTag(writer, 2,
            value.background_color)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: LoadingPlaceholder) {
        writer.writeBytes(value.unknownFields)
        if (value.background_color != null) ColorValue.ADAPTER.encodeWithTag(writer, 2,
            value.background_color)
        if (value.show_progress_indicator != false) ProtoAdapter.BOOL.encodeWithTag(writer, 1,
            value.show_progress_indicator)
      }

      override fun decode(reader: ProtoReader): LoadingPlaceholder {
        var show_progress_indicator: Boolean = false
        var background_color: ColorValue? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> show_progress_indicator = ProtoAdapter.BOOL.decode(reader)
            2 -> background_color = ColorValue.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return LoadingPlaceholder(
          show_progress_indicator = show_progress_indicator,
          background_color = background_color,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: LoadingPlaceholder): LoadingPlaceholder = value.copy(
        background_color = value.background_color?.let(ColorValue.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
