// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.baksha97.sdui.schema.Padding in sdui.proto
package com.baksha97.sdui.schema

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

public class Padding(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val all: Int = 0,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val horizontal: Int = 0,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val vertical: Int = 0,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 3,
  )
  public val start: Int = 0,
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 4,
  )
  public val top: Int = 0,
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 5,
  )
  public val end: Int = 0,
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 6,
  )
  public val bottom: Int = 0,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<Padding, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Padding) return false
    if (unknownFields != other.unknownFields) return false
    if (all != other.all) return false
    if (horizontal != other.horizontal) return false
    if (vertical != other.vertical) return false
    if (start != other.start) return false
    if (top != other.top) return false
    if (end != other.end) return false
    if (bottom != other.bottom) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + all.hashCode()
      result = result * 37 + horizontal.hashCode()
      result = result * 37 + vertical.hashCode()
      result = result * 37 + start.hashCode()
      result = result * 37 + top.hashCode()
      result = result * 37 + end.hashCode()
      result = result * 37 + bottom.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """all=$all"""
    result += """horizontal=$horizontal"""
    result += """vertical=$vertical"""
    result += """start=$start"""
    result += """top=$top"""
    result += """end=$end"""
    result += """bottom=$bottom"""
    return result.joinToString(prefix = "Padding{", separator = ", ", postfix = "}")
  }

  public fun copy(
    all: Int = this.all,
    horizontal: Int = this.horizontal,
    vertical: Int = this.vertical,
    start: Int = this.start,
    top: Int = this.top,
    end: Int = this.end,
    bottom: Int = this.bottom,
    unknownFields: ByteString = this.unknownFields,
  ): Padding = Padding(all, horizontal, vertical, start, top, end, bottom, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Padding> = object : ProtoAdapter<Padding>(
      FieldEncoding.LENGTH_DELIMITED, 
      Padding::class, 
      "type.googleapis.com/com.baksha97.sdui.schema.Padding", 
      PROTO_3, 
      null, 
      "sdui.proto"
    ) {
      override fun encodedSize(`value`: Padding): Int {
        var size = value.unknownFields.size
        if (value.all != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(1, value.all)
        if (value.horizontal != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(2,
            value.horizontal)
        if (value.vertical != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(3, value.vertical)
        if (value.start != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(4, value.start)
        if (value.top != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(5, value.top)
        if (value.end != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(6, value.end)
        if (value.bottom != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(7, value.bottom)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: Padding) {
        if (value.all != 0) ProtoAdapter.INT32.encodeWithTag(writer, 1, value.all)
        if (value.horizontal != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.horizontal)
        if (value.vertical != 0) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.vertical)
        if (value.start != 0) ProtoAdapter.INT32.encodeWithTag(writer, 4, value.start)
        if (value.top != 0) ProtoAdapter.INT32.encodeWithTag(writer, 5, value.top)
        if (value.end != 0) ProtoAdapter.INT32.encodeWithTag(writer, 6, value.end)
        if (value.bottom != 0) ProtoAdapter.INT32.encodeWithTag(writer, 7, value.bottom)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: Padding) {
        writer.writeBytes(value.unknownFields)
        if (value.bottom != 0) ProtoAdapter.INT32.encodeWithTag(writer, 7, value.bottom)
        if (value.end != 0) ProtoAdapter.INT32.encodeWithTag(writer, 6, value.end)
        if (value.top != 0) ProtoAdapter.INT32.encodeWithTag(writer, 5, value.top)
        if (value.start != 0) ProtoAdapter.INT32.encodeWithTag(writer, 4, value.start)
        if (value.vertical != 0) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.vertical)
        if (value.horizontal != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.horizontal)
        if (value.all != 0) ProtoAdapter.INT32.encodeWithTag(writer, 1, value.all)
      }

      override fun decode(reader: ProtoReader): Padding {
        var all: Int = 0
        var horizontal: Int = 0
        var vertical: Int = 0
        var start: Int = 0
        var top: Int = 0
        var end: Int = 0
        var bottom: Int = 0
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> all = ProtoAdapter.INT32.decode(reader)
            2 -> horizontal = ProtoAdapter.INT32.decode(reader)
            3 -> vertical = ProtoAdapter.INT32.decode(reader)
            4 -> start = ProtoAdapter.INT32.decode(reader)
            5 -> top = ProtoAdapter.INT32.decode(reader)
            6 -> end = ProtoAdapter.INT32.decode(reader)
            7 -> bottom = ProtoAdapter.INT32.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Padding(
          all = all,
          horizontal = horizontal,
          vertical = vertical,
          start = start,
          top = top,
          end = end,
          bottom = bottom,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: Padding): Padding = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
