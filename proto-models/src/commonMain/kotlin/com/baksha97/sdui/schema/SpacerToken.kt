// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.baksha97.sdui.schema.SpacerToken in sdui.proto
package com.baksha97.sdui.schema

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

public class SpacerToken(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val id: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val version: Int = 0,
  @field:WireField(
    tag = 3,
    adapter = "com.baksha97.sdui.schema.A11y#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val a11y: A11y? = null,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 3,
  )
  public val width: Int = 0,
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 4,
  )
  public val height: Int = 0,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<SpacerToken, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is SpacerToken) return false
    if (unknownFields != other.unknownFields) return false
    if (id != other.id) return false
    if (version != other.version) return false
    if (a11y != other.a11y) return false
    if (width != other.width) return false
    if (height != other.height) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + id.hashCode()
      result = result * 37 + version.hashCode()
      result = result * 37 + (a11y?.hashCode() ?: 0)
      result = result * 37 + width.hashCode()
      result = result * 37 + height.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """id=${sanitize(id)}"""
    result += """version=$version"""
    if (a11y != null) result += """a11y=$a11y"""
    result += """width=$width"""
    result += """height=$height"""
    return result.joinToString(prefix = "SpacerToken{", separator = ", ", postfix = "}")
  }

  public fun copy(
    id: String = this.id,
    version: Int = this.version,
    a11y: A11y? = this.a11y,
    width: Int = this.width,
    height: Int = this.height,
    unknownFields: ByteString = this.unknownFields,
  ): SpacerToken = SpacerToken(id, version, a11y, width, height, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<SpacerToken> = object : ProtoAdapter<SpacerToken>(
      FieldEncoding.LENGTH_DELIMITED, 
      SpacerToken::class, 
      "type.googleapis.com/com.baksha97.sdui.schema.SpacerToken", 
      PROTO_3, 
      null, 
      "sdui.proto"
    ) {
      override fun encodedSize(`value`: SpacerToken): Int {
        var size = value.unknownFields.size
        if (value.id != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.id)
        if (value.version != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(2, value.version)
        if (value.a11y != null) size += A11y.ADAPTER.encodedSizeWithTag(3, value.a11y)
        if (value.width != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(4, value.width)
        if (value.height != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(5, value.height)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: SpacerToken) {
        if (value.id != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id)
        if (value.version != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.version)
        if (value.a11y != null) A11y.ADAPTER.encodeWithTag(writer, 3, value.a11y)
        if (value.width != 0) ProtoAdapter.INT32.encodeWithTag(writer, 4, value.width)
        if (value.height != 0) ProtoAdapter.INT32.encodeWithTag(writer, 5, value.height)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: SpacerToken) {
        writer.writeBytes(value.unknownFields)
        if (value.height != 0) ProtoAdapter.INT32.encodeWithTag(writer, 5, value.height)
        if (value.width != 0) ProtoAdapter.INT32.encodeWithTag(writer, 4, value.width)
        if (value.a11y != null) A11y.ADAPTER.encodeWithTag(writer, 3, value.a11y)
        if (value.version != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.version)
        if (value.id != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id)
      }

      override fun decode(reader: ProtoReader): SpacerToken {
        var id: String = ""
        var version: Int = 0
        var a11y: A11y? = null
        var width: Int = 0
        var height: Int = 0
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> id = ProtoAdapter.STRING.decode(reader)
            2 -> version = ProtoAdapter.INT32.decode(reader)
            3 -> a11y = A11y.ADAPTER.decode(reader)
            4 -> width = ProtoAdapter.INT32.decode(reader)
            5 -> height = ProtoAdapter.INT32.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return SpacerToken(
          id = id,
          version = version,
          a11y = a11y,
          width = width,
          height = height,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: SpacerToken): SpacerToken = value.copy(
        a11y = value.a11y?.let(A11y.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
