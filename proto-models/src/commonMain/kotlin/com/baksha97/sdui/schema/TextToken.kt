// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.baksha97.sdui.schema.TextToken in sdui.proto
package com.baksha97.sdui.schema

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

/**
 * Leaf tokens
 */
public class TextToken(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val id: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val version: Int = 0,
  @field:WireField(
    tag = 3,
    adapter = "com.baksha97.sdui.schema.A11y#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val a11y: A11y? = null,
  @field:WireField(
    tag = 4,
    adapter = "com.baksha97.sdui.schema.TemplateString#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 3,
  )
  public val text: TemplateString? = null,
  @field:WireField(
    tag = 5,
    adapter = "com.baksha97.sdui.schema.TextStyle#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 4,
  )
  public val style: TextStyle = TextStyle.TEXT_STYLE_UNSPECIFIED,
  @field:WireField(
    tag = 6,
    adapter = "com.baksha97.sdui.schema.ColorValue#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 5,
  )
  public val color: ColorValue? = null,
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "maxLines",
    schemaIndex = 6,
  )
  public val max_lines: Int = 0,
  @field:WireField(
    tag = 8,
    adapter = "com.baksha97.sdui.schema.TextOverflowValue#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 7,
  )
  public val overflow: TextOverflowValue = TextOverflowValue.TEXT_OVERFLOW_UNSPECIFIED,
  @field:WireField(
    tag = 9,
    adapter = "com.baksha97.sdui.schema.TextAlignValue#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "textAlign",
    schemaIndex = 8,
  )
  public val text_align: TextAlignValue = TextAlignValue.TEXT_ALIGN_UNSPECIFIED,
  @field:WireField(
    tag = 10,
    adapter = "com.baksha97.sdui.schema.Margin#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 9,
  )
  public val margin: Margin? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<TextToken, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is TextToken) return false
    if (unknownFields != other.unknownFields) return false
    if (id != other.id) return false
    if (version != other.version) return false
    if (a11y != other.a11y) return false
    if (text != other.text) return false
    if (style != other.style) return false
    if (color != other.color) return false
    if (max_lines != other.max_lines) return false
    if (overflow != other.overflow) return false
    if (text_align != other.text_align) return false
    if (margin != other.margin) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + id.hashCode()
      result = result * 37 + version.hashCode()
      result = result * 37 + (a11y?.hashCode() ?: 0)
      result = result * 37 + (text?.hashCode() ?: 0)
      result = result * 37 + style.hashCode()
      result = result * 37 + (color?.hashCode() ?: 0)
      result = result * 37 + max_lines.hashCode()
      result = result * 37 + overflow.hashCode()
      result = result * 37 + text_align.hashCode()
      result = result * 37 + (margin?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """id=${sanitize(id)}"""
    result += """version=$version"""
    if (a11y != null) result += """a11y=$a11y"""
    if (text != null) result += """text=$text"""
    result += """style=$style"""
    if (color != null) result += """color=$color"""
    result += """max_lines=$max_lines"""
    result += """overflow=$overflow"""
    result += """text_align=$text_align"""
    if (margin != null) result += """margin=$margin"""
    return result.joinToString(prefix = "TextToken{", separator = ", ", postfix = "}")
  }

  public fun copy(
    id: String = this.id,
    version: Int = this.version,
    a11y: A11y? = this.a11y,
    text: TemplateString? = this.text,
    style: TextStyle = this.style,
    color: ColorValue? = this.color,
    max_lines: Int = this.max_lines,
    overflow: TextOverflowValue = this.overflow,
    text_align: TextAlignValue = this.text_align,
    margin: Margin? = this.margin,
    unknownFields: ByteString = this.unknownFields,
  ): TextToken = TextToken(id, version, a11y, text, style, color, max_lines, overflow, text_align,
      margin, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<TextToken> = object : ProtoAdapter<TextToken>(
      FieldEncoding.LENGTH_DELIMITED, 
      TextToken::class, 
      "type.googleapis.com/com.baksha97.sdui.schema.TextToken", 
      PROTO_3, 
      null, 
      "sdui.proto"
    ) {
      override fun encodedSize(`value`: TextToken): Int {
        var size = value.unknownFields.size
        if (value.id != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.id)
        if (value.version != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(2, value.version)
        if (value.a11y != null) size += A11y.ADAPTER.encodedSizeWithTag(3, value.a11y)
        if (value.text != null) size += TemplateString.ADAPTER.encodedSizeWithTag(4, value.text)
        if (value.style != TextStyle.TEXT_STYLE_UNSPECIFIED) size +=
            TextStyle.ADAPTER.encodedSizeWithTag(5, value.style)
        if (value.color != null) size += ColorValue.ADAPTER.encodedSizeWithTag(6, value.color)
        if (value.max_lines != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(7, value.max_lines)
        if (value.overflow != TextOverflowValue.TEXT_OVERFLOW_UNSPECIFIED) size +=
            TextOverflowValue.ADAPTER.encodedSizeWithTag(8, value.overflow)
        if (value.text_align != TextAlignValue.TEXT_ALIGN_UNSPECIFIED) size +=
            TextAlignValue.ADAPTER.encodedSizeWithTag(9, value.text_align)
        if (value.margin != null) size += Margin.ADAPTER.encodedSizeWithTag(10, value.margin)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: TextToken) {
        if (value.id != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id)
        if (value.version != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.version)
        if (value.a11y != null) A11y.ADAPTER.encodeWithTag(writer, 3, value.a11y)
        if (value.text != null) TemplateString.ADAPTER.encodeWithTag(writer, 4, value.text)
        if (value.style != TextStyle.TEXT_STYLE_UNSPECIFIED) TextStyle.ADAPTER.encodeWithTag(writer,
            5, value.style)
        if (value.color != null) ColorValue.ADAPTER.encodeWithTag(writer, 6, value.color)
        if (value.max_lines != 0) ProtoAdapter.INT32.encodeWithTag(writer, 7, value.max_lines)
        if (value.overflow != TextOverflowValue.TEXT_OVERFLOW_UNSPECIFIED)
            TextOverflowValue.ADAPTER.encodeWithTag(writer, 8, value.overflow)
        if (value.text_align != TextAlignValue.TEXT_ALIGN_UNSPECIFIED)
            TextAlignValue.ADAPTER.encodeWithTag(writer, 9, value.text_align)
        if (value.margin != null) Margin.ADAPTER.encodeWithTag(writer, 10, value.margin)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: TextToken) {
        writer.writeBytes(value.unknownFields)
        if (value.margin != null) Margin.ADAPTER.encodeWithTag(writer, 10, value.margin)
        if (value.text_align != TextAlignValue.TEXT_ALIGN_UNSPECIFIED)
            TextAlignValue.ADAPTER.encodeWithTag(writer, 9, value.text_align)
        if (value.overflow != TextOverflowValue.TEXT_OVERFLOW_UNSPECIFIED)
            TextOverflowValue.ADAPTER.encodeWithTag(writer, 8, value.overflow)
        if (value.max_lines != 0) ProtoAdapter.INT32.encodeWithTag(writer, 7, value.max_lines)
        if (value.color != null) ColorValue.ADAPTER.encodeWithTag(writer, 6, value.color)
        if (value.style != TextStyle.TEXT_STYLE_UNSPECIFIED) TextStyle.ADAPTER.encodeWithTag(writer,
            5, value.style)
        if (value.text != null) TemplateString.ADAPTER.encodeWithTag(writer, 4, value.text)
        if (value.a11y != null) A11y.ADAPTER.encodeWithTag(writer, 3, value.a11y)
        if (value.version != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.version)
        if (value.id != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id)
      }

      override fun decode(reader: ProtoReader): TextToken {
        var id: String = ""
        var version: Int = 0
        var a11y: A11y? = null
        var text: TemplateString? = null
        var style: TextStyle = TextStyle.TEXT_STYLE_UNSPECIFIED
        var color: ColorValue? = null
        var max_lines: Int = 0
        var overflow: TextOverflowValue = TextOverflowValue.TEXT_OVERFLOW_UNSPECIFIED
        var text_align: TextAlignValue = TextAlignValue.TEXT_ALIGN_UNSPECIFIED
        var margin: Margin? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> id = ProtoAdapter.STRING.decode(reader)
            2 -> version = ProtoAdapter.INT32.decode(reader)
            3 -> a11y = A11y.ADAPTER.decode(reader)
            4 -> text = TemplateString.ADAPTER.decode(reader)
            5 -> try {
              style = TextStyle.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            6 -> color = ColorValue.ADAPTER.decode(reader)
            7 -> max_lines = ProtoAdapter.INT32.decode(reader)
            8 -> try {
              overflow = TextOverflowValue.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            9 -> try {
              text_align = TextAlignValue.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            10 -> margin = Margin.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return TextToken(
          id = id,
          version = version,
          a11y = a11y,
          text = text,
          style = style,
          color = color,
          max_lines = max_lines,
          overflow = overflow,
          text_align = text_align,
          margin = margin,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: TextToken): TextToken = value.copy(
        a11y = value.a11y?.let(A11y.ADAPTER::redact),
        text = value.text?.let(TemplateString.ADAPTER::redact),
        color = value.color?.let(ColorValue.ADAPTER::redact),
        margin = value.margin?.let(Margin.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
