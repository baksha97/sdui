// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.baksha97.sdui.schema.Token in sdui.proto
package com.baksha97.sdui.schema

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.countNonNull
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

/**
 * Base interfaces and common types
 */
public class Token(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val id: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val version: Int = 0,
  @field:WireField(
    tag = 3,
    adapter = "com.baksha97.sdui.schema.A11y#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val a11y: A11y? = null,
  @field:WireField(
    tag = 10,
    adapter = "com.baksha97.sdui.schema.ColumnToken#ADAPTER",
    oneofName = "token_type",
    schemaIndex = 3,
  )
  public val column: ColumnToken? = null,
  @field:WireField(
    tag = 11,
    adapter = "com.baksha97.sdui.schema.RowToken#ADAPTER",
    oneofName = "token_type",
    schemaIndex = 4,
  )
  public val row: RowToken? = null,
  @field:WireField(
    tag = 12,
    adapter = "com.baksha97.sdui.schema.BoxToken#ADAPTER",
    oneofName = "token_type",
    schemaIndex = 5,
  )
  public val box: BoxToken? = null,
  @field:WireField(
    tag = 13,
    adapter = "com.baksha97.sdui.schema.LazyColumnToken#ADAPTER",
    jsonName = "lazyColumn",
    oneofName = "token_type",
    schemaIndex = 6,
  )
  public val lazy_column: LazyColumnToken? = null,
  @field:WireField(
    tag = 14,
    adapter = "com.baksha97.sdui.schema.LazyRowToken#ADAPTER",
    jsonName = "lazyRow",
    oneofName = "token_type",
    schemaIndex = 7,
  )
  public val lazy_row: LazyRowToken? = null,
  @field:WireField(
    tag = 15,
    adapter = "com.baksha97.sdui.schema.CardToken#ADAPTER",
    oneofName = "token_type",
    schemaIndex = 8,
  )
  public val card: CardToken? = null,
  @field:WireField(
    tag = 16,
    adapter = "com.baksha97.sdui.schema.TextToken#ADAPTER",
    oneofName = "token_type",
    schemaIndex = 9,
  )
  public val text: TextToken? = null,
  @field:WireField(
    tag = 17,
    adapter = "com.baksha97.sdui.schema.ButtonToken#ADAPTER",
    oneofName = "token_type",
    schemaIndex = 10,
  )
  public val button: ButtonToken? = null,
  @field:WireField(
    tag = 18,
    adapter = "com.baksha97.sdui.schema.SpacerToken#ADAPTER",
    oneofName = "token_type",
    schemaIndex = 11,
  )
  public val spacer: SpacerToken? = null,
  @field:WireField(
    tag = 19,
    adapter = "com.baksha97.sdui.schema.DividerToken#ADAPTER",
    oneofName = "token_type",
    schemaIndex = 12,
  )
  public val divider: DividerToken? = null,
  @field:WireField(
    tag = 20,
    adapter = "com.baksha97.sdui.schema.SliderToken#ADAPTER",
    oneofName = "token_type",
    schemaIndex = 13,
  )
  public val slider: SliderToken? = null,
  @field:WireField(
    tag = 21,
    adapter = "com.baksha97.sdui.schema.AsyncImageToken#ADAPTER",
    jsonName = "asyncImage",
    oneofName = "token_type",
    schemaIndex = 14,
  )
  public val async_image: AsyncImageToken? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<Token, Nothing>(ADAPTER, unknownFields) {
  init {
    require(countNonNull(column, row, box, lazy_column, lazy_row, card, text, button, spacer,
        divider, slider, async_image) <= 1) {
      "At most one of column, row, box, lazy_column, lazy_row, card, text, button, spacer, divider, slider, async_image may be non-null"
    }
  }

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Token) return false
    if (unknownFields != other.unknownFields) return false
    if (id != other.id) return false
    if (version != other.version) return false
    if (a11y != other.a11y) return false
    if (column != other.column) return false
    if (row != other.row) return false
    if (box != other.box) return false
    if (lazy_column != other.lazy_column) return false
    if (lazy_row != other.lazy_row) return false
    if (card != other.card) return false
    if (text != other.text) return false
    if (button != other.button) return false
    if (spacer != other.spacer) return false
    if (divider != other.divider) return false
    if (slider != other.slider) return false
    if (async_image != other.async_image) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + id.hashCode()
      result = result * 37 + version.hashCode()
      result = result * 37 + (a11y?.hashCode() ?: 0)
      result = result * 37 + (column?.hashCode() ?: 0)
      result = result * 37 + (row?.hashCode() ?: 0)
      result = result * 37 + (box?.hashCode() ?: 0)
      result = result * 37 + (lazy_column?.hashCode() ?: 0)
      result = result * 37 + (lazy_row?.hashCode() ?: 0)
      result = result * 37 + (card?.hashCode() ?: 0)
      result = result * 37 + (text?.hashCode() ?: 0)
      result = result * 37 + (button?.hashCode() ?: 0)
      result = result * 37 + (spacer?.hashCode() ?: 0)
      result = result * 37 + (divider?.hashCode() ?: 0)
      result = result * 37 + (slider?.hashCode() ?: 0)
      result = result * 37 + (async_image?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """id=${sanitize(id)}"""
    result += """version=$version"""
    if (a11y != null) result += """a11y=$a11y"""
    if (column != null) result += """column=$column"""
    if (row != null) result += """row=$row"""
    if (box != null) result += """box=$box"""
    if (lazy_column != null) result += """lazy_column=$lazy_column"""
    if (lazy_row != null) result += """lazy_row=$lazy_row"""
    if (card != null) result += """card=$card"""
    if (text != null) result += """text=$text"""
    if (button != null) result += """button=$button"""
    if (spacer != null) result += """spacer=$spacer"""
    if (divider != null) result += """divider=$divider"""
    if (slider != null) result += """slider=$slider"""
    if (async_image != null) result += """async_image=$async_image"""
    return result.joinToString(prefix = "Token{", separator = ", ", postfix = "}")
  }

  public fun copy(
    id: String = this.id,
    version: Int = this.version,
    a11y: A11y? = this.a11y,
    column: ColumnToken? = this.column,
    row: RowToken? = this.row,
    box: BoxToken? = this.box,
    lazy_column: LazyColumnToken? = this.lazy_column,
    lazy_row: LazyRowToken? = this.lazy_row,
    card: CardToken? = this.card,
    text: TextToken? = this.text,
    button: ButtonToken? = this.button,
    spacer: SpacerToken? = this.spacer,
    divider: DividerToken? = this.divider,
    slider: SliderToken? = this.slider,
    async_image: AsyncImageToken? = this.async_image,
    unknownFields: ByteString = this.unknownFields,
  ): Token = Token(id, version, a11y, column, row, box, lazy_column, lazy_row, card, text, button,
      spacer, divider, slider, async_image, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Token> = object : ProtoAdapter<Token>(
      FieldEncoding.LENGTH_DELIMITED, 
      Token::class, 
      "type.googleapis.com/com.baksha97.sdui.schema.Token", 
      PROTO_3, 
      null, 
      "sdui.proto"
    ) {
      override fun encodedSize(`value`: Token): Int {
        var size = value.unknownFields.size
        if (value.id != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.id)
        if (value.version != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(2, value.version)
        if (value.a11y != null) size += A11y.ADAPTER.encodedSizeWithTag(3, value.a11y)
        size += ColumnToken.ADAPTER.encodedSizeWithTag(10, value.column)
        size += RowToken.ADAPTER.encodedSizeWithTag(11, value.row)
        size += BoxToken.ADAPTER.encodedSizeWithTag(12, value.box)
        size += LazyColumnToken.ADAPTER.encodedSizeWithTag(13, value.lazy_column)
        size += LazyRowToken.ADAPTER.encodedSizeWithTag(14, value.lazy_row)
        size += CardToken.ADAPTER.encodedSizeWithTag(15, value.card)
        size += TextToken.ADAPTER.encodedSizeWithTag(16, value.text)
        size += ButtonToken.ADAPTER.encodedSizeWithTag(17, value.button)
        size += SpacerToken.ADAPTER.encodedSizeWithTag(18, value.spacer)
        size += DividerToken.ADAPTER.encodedSizeWithTag(19, value.divider)
        size += SliderToken.ADAPTER.encodedSizeWithTag(20, value.slider)
        size += AsyncImageToken.ADAPTER.encodedSizeWithTag(21, value.async_image)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: Token) {
        if (value.id != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id)
        if (value.version != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.version)
        if (value.a11y != null) A11y.ADAPTER.encodeWithTag(writer, 3, value.a11y)
        ColumnToken.ADAPTER.encodeWithTag(writer, 10, value.column)
        RowToken.ADAPTER.encodeWithTag(writer, 11, value.row)
        BoxToken.ADAPTER.encodeWithTag(writer, 12, value.box)
        LazyColumnToken.ADAPTER.encodeWithTag(writer, 13, value.lazy_column)
        LazyRowToken.ADAPTER.encodeWithTag(writer, 14, value.lazy_row)
        CardToken.ADAPTER.encodeWithTag(writer, 15, value.card)
        TextToken.ADAPTER.encodeWithTag(writer, 16, value.text)
        ButtonToken.ADAPTER.encodeWithTag(writer, 17, value.button)
        SpacerToken.ADAPTER.encodeWithTag(writer, 18, value.spacer)
        DividerToken.ADAPTER.encodeWithTag(writer, 19, value.divider)
        SliderToken.ADAPTER.encodeWithTag(writer, 20, value.slider)
        AsyncImageToken.ADAPTER.encodeWithTag(writer, 21, value.async_image)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: Token) {
        writer.writeBytes(value.unknownFields)
        AsyncImageToken.ADAPTER.encodeWithTag(writer, 21, value.async_image)
        SliderToken.ADAPTER.encodeWithTag(writer, 20, value.slider)
        DividerToken.ADAPTER.encodeWithTag(writer, 19, value.divider)
        SpacerToken.ADAPTER.encodeWithTag(writer, 18, value.spacer)
        ButtonToken.ADAPTER.encodeWithTag(writer, 17, value.button)
        TextToken.ADAPTER.encodeWithTag(writer, 16, value.text)
        CardToken.ADAPTER.encodeWithTag(writer, 15, value.card)
        LazyRowToken.ADAPTER.encodeWithTag(writer, 14, value.lazy_row)
        LazyColumnToken.ADAPTER.encodeWithTag(writer, 13, value.lazy_column)
        BoxToken.ADAPTER.encodeWithTag(writer, 12, value.box)
        RowToken.ADAPTER.encodeWithTag(writer, 11, value.row)
        ColumnToken.ADAPTER.encodeWithTag(writer, 10, value.column)
        if (value.a11y != null) A11y.ADAPTER.encodeWithTag(writer, 3, value.a11y)
        if (value.version != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.version)
        if (value.id != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id)
      }

      override fun decode(reader: ProtoReader): Token {
        var id: String = ""
        var version: Int = 0
        var a11y: A11y? = null
        var column: ColumnToken? = null
        var row: RowToken? = null
        var box: BoxToken? = null
        var lazy_column: LazyColumnToken? = null
        var lazy_row: LazyRowToken? = null
        var card: CardToken? = null
        var text: TextToken? = null
        var button: ButtonToken? = null
        var spacer: SpacerToken? = null
        var divider: DividerToken? = null
        var slider: SliderToken? = null
        var async_image: AsyncImageToken? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> id = ProtoAdapter.STRING.decode(reader)
            2 -> version = ProtoAdapter.INT32.decode(reader)
            3 -> a11y = A11y.ADAPTER.decode(reader)
            10 -> column = ColumnToken.ADAPTER.decode(reader)
            11 -> row = RowToken.ADAPTER.decode(reader)
            12 -> box = BoxToken.ADAPTER.decode(reader)
            13 -> lazy_column = LazyColumnToken.ADAPTER.decode(reader)
            14 -> lazy_row = LazyRowToken.ADAPTER.decode(reader)
            15 -> card = CardToken.ADAPTER.decode(reader)
            16 -> text = TextToken.ADAPTER.decode(reader)
            17 -> button = ButtonToken.ADAPTER.decode(reader)
            18 -> spacer = SpacerToken.ADAPTER.decode(reader)
            19 -> divider = DividerToken.ADAPTER.decode(reader)
            20 -> slider = SliderToken.ADAPTER.decode(reader)
            21 -> async_image = AsyncImageToken.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Token(
          id = id,
          version = version,
          a11y = a11y,
          column = column,
          row = row,
          box = box,
          lazy_column = lazy_column,
          lazy_row = lazy_row,
          card = card,
          text = text,
          button = button,
          spacer = spacer,
          divider = divider,
          slider = slider,
          async_image = async_image,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: Token): Token = value.copy(
        a11y = value.a11y?.let(A11y.ADAPTER::redact),
        column = value.column?.let(ColumnToken.ADAPTER::redact),
        row = value.row?.let(RowToken.ADAPTER::redact),
        box = value.box?.let(BoxToken.ADAPTER::redact),
        lazy_column = value.lazy_column?.let(LazyColumnToken.ADAPTER::redact),
        lazy_row = value.lazy_row?.let(LazyRowToken.ADAPTER::redact),
        card = value.card?.let(CardToken.ADAPTER::redact),
        text = value.text?.let(TextToken.ADAPTER::redact),
        button = value.button?.let(ButtonToken.ADAPTER::redact),
        spacer = value.spacer?.let(SpacerToken.ADAPTER::redact),
        divider = value.divider?.let(DividerToken.ADAPTER::redact),
        slider = value.slider?.let(SliderToken.ADAPTER::redact),
        async_image = value.async_image?.let(AsyncImageToken.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
