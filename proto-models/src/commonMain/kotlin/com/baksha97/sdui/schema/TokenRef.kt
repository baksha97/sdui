// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.baksha97.sdui.schema.TokenRef in sdui.proto
package com.baksha97.sdui.schema

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.collections.Map
import kotlin.lazy
import okio.ByteString

public class TokenRef(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val id: String = "",
  bind: Map<String, String> = emptyMap(),
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<TokenRef, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 2,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    schemaIndex = 1,
  )
  public val bind: Map<String, String> = immutableCopyOf("bind", bind)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is TokenRef) return false
    if (unknownFields != other.unknownFields) return false
    if (id != other.id) return false
    if (bind != other.bind) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + id.hashCode()
      result = result * 37 + bind.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """id=${sanitize(id)}"""
    if (bind.isNotEmpty()) result += """bind=$bind"""
    return result.joinToString(prefix = "TokenRef{", separator = ", ", postfix = "}")
  }

  public fun copy(
    id: String = this.id,
    bind: Map<String, String> = this.bind,
    unknownFields: ByteString = this.unknownFields,
  ): TokenRef = TokenRef(id, bind, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<TokenRef> = object : ProtoAdapter<TokenRef>(
      FieldEncoding.LENGTH_DELIMITED, 
      TokenRef::class, 
      "type.googleapis.com/com.baksha97.sdui.schema.TokenRef", 
      PROTO_3, 
      null, 
      "sdui.proto"
    ) {
      private val bindAdapter: ProtoAdapter<Map<String, String>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING) }

      override fun encodedSize(`value`: TokenRef): Int {
        var size = value.unknownFields.size
        if (value.id != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.id)
        size += bindAdapter.encodedSizeWithTag(2, value.bind)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: TokenRef) {
        if (value.id != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id)
        bindAdapter.encodeWithTag(writer, 2, value.bind)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: TokenRef) {
        writer.writeBytes(value.unknownFields)
        bindAdapter.encodeWithTag(writer, 2, value.bind)
        if (value.id != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id)
      }

      override fun decode(reader: ProtoReader): TokenRef {
        var id: String = ""
        val bind = mutableMapOf<String, String>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> id = ProtoAdapter.STRING.decode(reader)
            2 -> bind.putAll(bindAdapter.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return TokenRef(
          id = id,
          bind = bind,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: TokenRef): TokenRef = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
